# ---------------------------------------
# ğŸ”¹ 1. Fonksiyon TanÄ±mÄ± (def)

def selamla():
    print("Merhaba!")

# Fonksiyon tanÄ±mlanÄ±r ama Ã§alÄ±ÅŸmaz.
# Ã‡alÄ±ÅŸmasÄ± iÃ§in Ã§aÄŸÄ±rmak gerekir:
selamla()  # Ã‡Ä±ktÄ±: Merhaba!

# ---------------------------------------


# âœ… Ekstra Ã–rnek:

def hosgeldin():
    print("HoÅŸ geldiniz!")

hosgeldin()  # Ã‡Ä±ktÄ±: HoÅŸ geldiniz!

# Fonksiyonlar def ile tanÄ±mlanÄ±r ve Ã§aÄŸrÄ±lmadan Ã§alÄ±ÅŸmaz.
# ---------------------------------------



# ğŸ”¹ 2. Parametreli Fonksiyon

def selam_ver(isim):
    print(f"Selam, {isim}!")

selam_ver("Ali")     # Ã‡Ä±ktÄ±: Selam, Ali!
selam_ver("AyÅŸe")    # Ã‡Ä±ktÄ±: Selam, AyÅŸe
# ---------------------------------------


# âœ… Ekstra Ã–rnek:

def yas_soyle(isim, yas):
    print(f"{isim} {yas} yaÅŸÄ±nda.")

yas_soyle("Zeynep", 23)
# Ã‡Ä±ktÄ±: Zeynep 23 yaÅŸÄ±nda.

# Parametreli fonksiyonlar dÄ±ÅŸarÄ±dan veri alÄ±r.
# ---------------------------------------



# ğŸ”¹ 3. VarsayÄ±lan Parametre

def topla(a, b=5):
    print("Toplam:", a + b)

topla(3)       # Ã‡Ä±ktÄ±: Toplam: 8
topla(3, 2)    # Ã‡Ä±ktÄ±: Toplam: 5
# ---------------------------------------


# âœ… Ekstra Ã–rnek:

def selam(isim="ZiyaretÃ§i"):
    print(f"Merhaba {isim}!")

selam()            # Ã‡Ä±ktÄ±: Merhaba ZiyaretÃ§i!
selam("Berke")     # Ã‡Ä±ktÄ±: Merhaba Berke!

# VarsayÄ±lan parametreler, deÄŸer girilmezse Ã§alÄ±ÅŸÄ±r.
# ---------------------------------------



# ğŸ”¹ 4. return ile DeÄŸer DÃ¶ndÃ¼rme

def carp(x, y):
    return x * y

sonuc = carp(4, 5)
print("Ã‡arpÄ±m:", sonuc)  # Ã‡Ä±ktÄ±: Ã‡arpÄ±m: 20
# ---------------------------------------


# âœ… Ekstra Ã–rnek:

def kare(x):
    return x ** 2

print("Karesi:", kare(6))  # Ã‡Ä±ktÄ±: Karesi: 36

# return, sonucu dÄ±ÅŸarÄ± aktarÄ±r. print ile yazdÄ±rÄ±labilir.
# ---------------------------------------



# ğŸ”¹ 5. Anahtar Kelime ArgÃ¼manlar (Keyword Arguments)

def bilgi(ad, sehir):
    print(f"{ad} adlÄ± kiÅŸi {sehir}'de yaÅŸÄ±yor.")

# ArgÃ¼manlarÄ±n sÄ±rasÄ± Ã¶nemli deÄŸil Ã§Ã¼nkÃ¼ isimle eÅŸleÅŸiyor
bilgi(sehir="Ankara", ad="Zeynep")
# Ã‡Ä±ktÄ±: Zeynep adlÄ± kiÅŸi Ankara'da yaÅŸÄ±yor.
# ---------------------------------------


# âœ… Ekstra Ã–rnek:

def siparis_ozeti(urun, adet, fiyat):
    print(f"{adet} adet {urun}, tanesi {fiyat} TL")

siparis_ozeti(adet=3, fiyat=25, urun="Kahve")
# Ã‡Ä±ktÄ±: 3 adet Kahve, tanesi 25 TL
# ---------------------------------------



# ğŸ”¹ 6. *args (Ã§oklu konumsal argÃ¼man)

# *args, fonksiyona birden fazla sayÄ±da konumsal (sÄ±ralÄ±) argÃ¼man gÃ¶ndermeyi saÄŸlar.
# Bu argÃ¼manlar fonksiyon iÃ§inde bir tuple gibi davranÄ±r.

def sayilar_toplami(*args):
    print("Gelen sayÄ±lar:", args)
    print("Toplam:", sum(args))

sayilar_toplami(1, 2, 3)
# Ã‡Ä±ktÄ±:
# Gelen sayÄ±lar: (1, 2, 3)
# Toplam: 6

sayilar_toplami(10, 20, 30, 40)
# Ã‡Ä±ktÄ±:
# Gelen sayÄ±lar: (10, 20, 30, 40)
# Toplam: 100

# ---------------------------------------


# âœ… Ekstra Ã–rnek 1: Ortalama Hesaplama

def ortalama(*sayilar):
    if sayilar:
        print("Ortalama:", sum(sayilar) / len(sayilar))
    else:
        print("HiÃ§ sayÄ± girilmedi.")

ortalama(10, 20, 30)   # Ã‡Ä±ktÄ±: Ortalama: 20.0
ortalama()             # Ã‡Ä±ktÄ±: HiÃ§ sayÄ± girilmedi.

# ---------------------------------------


# âœ… Ekstra Ã–rnek 2: En BÃ¼yÃ¼k SayÄ±yÄ± Bulma

def en_buyuk(*args):
    print("En bÃ¼yÃ¼k sayÄ±:", max(args))

en_buyuk(4, 8, 2, 15, 3)
# Ã‡Ä±ktÄ±: En bÃ¼yÃ¼k sayÄ±: 15

# ---------------------------------------


# âœ… Ekstra Ã–rnek 3: Ä°simleri YazdÄ±rma

def isimleri_yaz(*isimler):
    for isim in isimler:
        print(f"Merhaba, {isim}!")

isimleri_yaz("Ali", "AyÅŸe", "Zeynep")
# Ã‡Ä±ktÄ±:
# Merhaba, Ali!
# Merhaba, AyÅŸe!
# Merhaba, Zeynep!

# ---------------------------------------
# Not:
# - *args sadece konumsal (sÄ±ralÄ±) argÃ¼manlarÄ± alÄ±r
# - Fonksiyonlarda argÃ¼man sayÄ±sÄ±nÄ± sÄ±nÄ±rsÄ±z hale getirmek iÃ§in kullanÄ±lÄ±r
# - args ismi deÄŸiÅŸtirilebilir (Ã¶rn: *sayilar), ama genelde *args kullanÄ±lÄ±r
# ----------------------------------------------



# ğŸ”¹ 7. **kwargs (Ã§oklu anahtar-deÄŸer argÃ¼manÄ±)

# **kwargs, fonksiyona istenildiÄŸi kadar anahtar=deÄŸer Ã§iftleri gÃ¶ndermeyi saÄŸlar.
# Fonksiyon iÃ§inde bu veriler bir sÃ¶zlÃ¼k (dict) olarak yakalanÄ±r.

def kisi_bilgisi(**kwargs):
    for key, value in kwargs.items():
        print(f"{key} â†’ {value}")

kisi_bilgisi(ad="Ali", yas=30, sehir="Ä°zmir")
# Ã‡Ä±ktÄ±:
# ad â†’ Ali
# yas â†’ 30
# sehir â†’ Ä°zmir
# ---------------------------------------


# âœ… Ekstra Ã–rnek 1: Profil YazdÄ±rma

def profil(**bilgiler):
    print("Profil Bilgileri:")
    for k, v in bilgiler.items():
        print(f"- {k}: {v}")

profil(ad="AyÅŸe", meslek="YazÄ±lÄ±mcÄ±", medeni_hal="Bekar")
# Ã‡Ä±ktÄ±:
# Profil Bilgileri:
# - ad: AyÅŸe
# - meslek: YazÄ±lÄ±mcÄ±
# - medeni_hal: Bekar
# ---------------------------------------


# âœ… Ekstra Ã–rnek 2: VarsayÄ±lanlar + kwargs

def mail_gonder(kime, konu="Genel", **detaylar):
    print(f"Mail gÃ¶nderiliyor: {kime}")
    print(f"Konu: {konu}")
    for anahtar, deger in detaylar.items():
        print(f"{anahtar} â†’ {deger}")

mail_gonder("mehmet@gmail.com", mesaj="ToplantÄ± 14.00'te", onem="YÃ¼ksek")
# Ã‡Ä±ktÄ±:
# Mail gÃ¶nderiliyor: mehmet@gmail.com
# Konu: Genel
# mesaj â†’ ToplantÄ± 14.00'te
# onem â†’ YÃ¼ksek
# ---------------------------------------


# âœ… Ekstra Ã–rnek 3: kwargs + args birlikte kullanÄ±mÄ±

def detayli_bilgi(*args, **kwargs):
    print("Pozisyonel argÃ¼manlar:", args)
    print("Anahtar-deÄŸer argÃ¼manlarÄ±:", kwargs)

detayli_bilgi("Python", "React", sehir="Ä°stanbul", yil=2025)
# Ã‡Ä±ktÄ±:
# Pozisyonel argÃ¼manlar: ('Python', 'React')
# Anahtar-deÄŸer argÃ¼manlarÄ±: {'sehir': 'Ä°stanbul', 'yil': 2025}

# ---------------------------------------
# Notlar:
# - kwargs â†’ "keyword arguments" ifadesinin kÄ±saltmasÄ±dÄ±r
# - kwargs ismi yerine baÅŸka isim de kullanÄ±labilir (Ã¶rn: **bilgi), ama genelde **kwargs yazÄ±lÄ±r
# - kwargs bir dict (sÃ¶zlÃ¼k) gibi davranÄ±r â†’ .items(), .keys(), .values() ile iÅŸlenebilir
# ---------------------------------------



# ğŸ”¹ 8. Fonksiyon Ä°Ã§inde KoÅŸul ve DÃ¶ngÃ¼

def tek_mi_cift_mi(sayi):
    if sayi % 2 == 0:
        print(f"{sayi} Ã§ift sayÄ±dÄ±r.")
    else:
        print(f"{sayi} tek sayÄ±dÄ±r.")

tek_mi_cift_mi(11)
tek_mi_cift_mi(24)

# ---------------------------------------
# âœ… Ekstra: DÃ¶ngÃ¼ ile

def tekleri_yaz(sayilar):
    for s in sayilar:
        if s % 2 == 1:
            print("Tek:", s)

tekleri_yaz([1, 2, 3, 4, 5])
# Ã‡Ä±ktÄ±: 1, 3, 5
# ---------------------------------------



# ğŸ”¹ 9. Fonksiyonlar ArasÄ± Ã‡aÄŸrÄ±

def karesi(x):
    return x * x

def yazdir(x):
    sonuc = karesi(x)
    print(f"{x} sayÄ±sÄ±nÄ±n karesi: {sonuc}")

yazdir(7)  # Ã‡Ä±ktÄ±: 7 sayÄ±sÄ±nÄ±n karesi: 49

# ---------------------------------------



# ğŸ”¹ 10. Docstring (Fonksiyon AÃ§Ä±klamasÄ±)

def bol(a, b):
    """
    Bu fonksiyon iki sayÄ±yÄ± bÃ¶ler.
    b sÄ±fÄ±r olursa hata mesajÄ± dÃ¶ner.
    """
    if b == 0:
        return "Hata: SÄ±fÄ±ra bÃ¶lÃ¼nemez!"
    return a / b

print(bol(10, 2))  # Ã‡Ä±ktÄ±: 5.0
print(bol(10, 0))  # Ã‡Ä±ktÄ±: Hata: SÄ±fÄ±ra bÃ¶lÃ¼nemez!

# Docstring'leri gÃ¶rmek iÃ§in: help(bol) veya print(bol.__doc__)
